/*

# A Simple Responsive CSS Grid Based on Creatix

May 2016  
Edwardson Tan

## Acknowledgement ##
[Creatix CSS](http://www.col-reatix.org/creatix-css/) is by Karin Soika and Ralph Soika. They've made [their stylesheets](https://github.com/laluluny/creatix-css/) available on a Creative Commons Share Alike license [CC BY-SA](http://creativecommons.org/licenses/by-sa/4.0/)

[Normalize.css](https://necolas.github.io/normalize.css/) is by Nicolas Gallagher and Jonathan Neal. Their stylesheet is provided on an [MIT License](https://opensource.org/licenses/MIT).

## Features ##
* All columns widths are specified in percentage of viewport
* Column widths automatically change to single-column layout for small viewport devices
* Coded in SCSS with gutter margin defined as a variable and is therefore adjustable to suit page/site requirements.

## Requirements ##
SCSS compiler is required to create the CSS.

## References ##
* [Yet Another CSS Grid System](https://github.col-om/sans0r/yacgs)
* [Understanding CSS Grid Systems from the Ground Up](https://www.sitepoint.com/understanding-css-grid-systems/)

## License ##
[CC BY-SA](http://creativecommons.org/licenses/by-sa/4.0/) or [MIT License](https://opensource.org/licenses/MIT), whichever is the appropriate one (hey, I'm no legal eagle)

*/

// make sure normalize.css has already been downloaded into css folder
@import url(normalize.css); 

/*! Initial styling for all pages */

// use box-border as default so that width = content width + padding + border (but excludes margins)
// from https://css-tricks.com/box-sizing/ , https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/ 
html {
  box-sizing: border-box;
	font: normal 100% sans-serif;
}

*, *:before, *:after {
  box-sizing: inherit;
}
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


// Normalize.css only includes body {margin: 0}
// see https://github.com/vladocar/CSS-Mini-Reset/blob/master/CSS-Mini-Reset.css
html, body, div, form, fieldset, legend, label {
	margin: 0;
	padding: 0;
}
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


// see https://github.com/vladocar/CSS-Mini-Reset/blob/master/CSS-Mini-Reset.css
h1, h2, h3, h4, h5, h6, th, td, caption {
	font-weight: normal;
}
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


// large images should automatically resize down as viewport size decreases
img {
	max-width: 100%;
	border: 0;			// I think some browsers add borders to images
}
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


// table/cell borders and paddings should be specified by user as requirements dictate
table {
	border-collapse: collapse;
	border-spacing: 0;
	max-width: 100%;
}

// wrap tables in <div class='table'> so that tables with many columns or wide content will not increase the width of the page beyond 100% and will instead automatically have scrollbars when browser window is sized down or will inherently be "swipe-able"/"flick-able" horizontally in tablets/smartphones  
div.table {
	overflow: auto;
}
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

a {
	text-decoration: none;
}

// ====================================================================
// Grid System
// ====================================================================

// all grid classes are prefixed by "col-" for easy targeting with attribute selectors 
[class*="col-"] {
	margin: 0;
	padding: 0 1em;
	display: inline-block;
	float: left;
	position: relative;
}

// Change this gutter size as required. Must be specified as percentage. A value of zero removes gutters completely. 
// Bear in mind that column width decreases as gutter width increases.
$gutter: 0.5%;

[class*="col-"] {
	margin-left: $gutter; 
	margin-right: $gutter; 
}

// The col-x class specifies how wide the element will be, wherein width as percentage = (x/12)*100 - (gutter*2)
.col-1 {width: 1/12 * 100% - $gutter * 2}
.col-2 {width: 2/12 * 100% - $gutter * 2}
.col-3 {width: 3/12 * 100% - $gutter * 2}
.col-4 {width: 4/12 * 100% - $gutter * 2}
.col-5 {width: 5/12 * 100% - $gutter * 2}
.col-6 {width: 6/12 * 100% - $gutter * 2}
.col-7 {width: 7/12 * 100% - $gutter * 2}
.col-8 {width: 8/12 * 100% - $gutter * 2}
.col-9 {width: 9/12 * 100% - $gutter * 2}
.col-10 {width: 10/12 * 100% - $gutter * 2}
.col-11 {width: 11/12 * 100% - $gutter * 2}
.col-12 {width: 12/12 * 100% - $gutter * 2}

.left-1 {left: 1/12 * 100%}
.left-2 {left: 2/12 * 100%}
.left-3 {left: 3/12 * 100%}
.left-4 {left: 4/12 * 100%}
.left-5 {left: 5/12 * 100%}
.left-6 {left: 6/12 * 100%}
.left-7 {left: 7/12 * 100%}
.left-8 {left: 8/12 * 100%}
.left-9 {left: 9/12 * 100%}
.left-10 {left: 10/12 * 100%}
.left-11 {left: 11/12 * 100%}


@media screen and (max-width: 640px) {
	[class*="col-"] {
		width: 100%;
		margin-left: 0;
		margin-right: 0;
	}
	[class*="left-"] {
		left: 0;
	}
}
